#!/usr/bin/python

import os
import psutil
import re
import subprocess
import sys
import syslog


try:
    import rpm
except:
    print("This tool can only run on redhat-derivated hosts")
    sys.exit(-1)


MISSING_RE = re.compile("^missing")
MATCH_RE   = re.compile(r'^(?P<size>\.|S)'
                         '(?P<mode>\.|M)'
                         '(?P<md5>[\?\.5])'
                         '(?P<device>\.|D)'
                         '(?P<link>\.|L)'
                         '(?P<user>\.|U)'
                         '(?P<group>\.|G)'
                         '(?P<mtime>\.|T)'
                         '(?P<capability>\.|P)'
                         '  (?P<attribute>[cdglr ]?) '
                         '(?P<filename>\/.*)$')


def renice(process_id, nice=18, ioclass=psutil.IOPRIO_CLASS_BE, iovalue=6):
    process = psutil.Process(process_id)
    process.set_nice(nice)
    process.set_ionice(ioclass, value=iovalue)


renice(os.getpid())
proc = subprocess.Popen(["rpm", "-V", "--all"], stdout = subprocess.PIPE, stderr = subprocess.PIPE)
renice(proc.pid, nice=19, iovalue=7)

syslog.openlog('cern-rpmverify')
syslog.syslog("started\n")

missingPattern = re.compile("^missing")

failedChecksumFiles = []
failedLink = []
failedCapability = []

for line in iter(proc.stdout.readline, ''):
    line = line.strip()
    if missingPattern.match(line):
        #skip missing files
        continue
    match = matchPattern.match(line)
    if match is None:
        if sys.version_info < (2, 6, 0, '', 0):
            syslog.syslog("Error parsing ''%s''\n" % line)
        else:
            syslog.syslog("Error parsing ''{0}''\n".format(line))
        continue
    if match.group('attribute') == 'c':
        #skip config files
        continue
    if match.group('md5') != '.':
        failedChecksumFiles.append(match.group('filename').strip())
    if match.group('link') != '.':
        failedLink.append(match.group('filename').strip())
    if sys.version_info >= (2, 6, 0, '', 0):
        if match.group('capability') != '.':
            failedCapability.append(match.group('filename').strip())

for line in iter(proc.stderr.readline, ''):
    if sys.version_info < (2, 6, 0, '', 0):
        syslog.syslog("Error: ''%s''\n" % line)
    else:
        syslog.syslog("Error: ''{0}''\n".format(line))

#Get the rpm package names that these files belong to
try:
    transactionSet = rpm.TransactionSet()
    headers = transactionSet.dbMatch()

    for header in headers:
        for filename in header[rpm.RPMTAG_FILENAMES]:
            if filename in failedChecksumFiles:				
                syslog.syslog("File " + filename + " from package " + header[rpm.RPMTAG_NAME] + "-" +
                              header[rpm.RPMTAG_VERSION]+ "-" + header[rpm.RPMTAG_RELEASE] + " has been modified\n")
                failedChecksumFiles.remove(filename)
            if filename in failedLink:				
                syslog.syslog("Link " + filename + " from package " + header[rpm.RPMTAG_NAME] + "-" +
                              header[rpm.RPMTAG_VERSION]+ "-" + header[rpm.RPMTAG_RELEASE] + " has been modified\n")
                failedLink.remove(filename)
            if filename in failedCapability:				
                syslog.syslog("Capacity on file " + filename + " from package " + header[rpm.RPMTAG_NAME] + "-" +
                              header[rpm.RPMTAG_VERSION]+ "-" + header[rpm.RPMTAG_RELEASE] + " has been modified\n")
                failedCapability.remove(filename)

    for filename in failedChecksumFiles:
        syslog.syslog("File " + filename + " from unknown package  has been modified\n")
    for filename in failedLink:
        syslog.syslog("Link " + filename + " from unknown package  has been modified\n")
    for filename in failedCapability:
        syslog.syslog("Capacity on file " + filename + " from unknown package  has been modified\n")
except rpm._rpm.error as e:
    syslog.syslog("Error in the RPM code: {0}".format(str(e)))

syslog.syslog("finished\n")
